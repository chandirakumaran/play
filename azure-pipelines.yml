pr:
  branches:
    include:
      - main
      
trigger: none

pool:
  vmImage: ubuntu-latest

stages:
# Stage 1
- stage: Build
  displayName: 'Dummy Build Stage'
  jobs:
  - job: BuildJob
    displayName: 'Build Job'
    steps:
    - script: echo "This is the Build stage"
      displayName: 'Print Build Message'

# Stage 2
- stage: Test
  displayName: 'Dummy Test Stage'
  dependsOn: Build   # Ensures this runs after Build stage
  jobs:
  - job: TestJob
    displayName: 'Test Job'
    steps:
    - script: echo "This is the Test stage"
      displayName: 'Print Test Message'
  - job: changelog
    displayName: 'log check'
    steps:
    - script: |
        git fetch origin +refs/heads/*:refs/remotes/origin/*
        TARGET_BRANCH=$(System.PullRequest.TargetBranch)
        TARGET_BRANCH=${TARGET_BRANCH#refs/heads/}
        echo "Comparing against: $TARGET_BRANCH"
        
        if git diff origin/$TARGET_BRANCH HEAD -- changelog.md \
          | grep '^+' | grep -v '^+++' > /dev/null; then
          echo "New lines were added to changelog.md. Pipeline will continue."
        else
          echo "No new lines added to changelog.md. Failing the pipeline."
          exit 1
        fi
      displayName: 'Check for Changelog Update'

# Stage 3: Package and Upload Repo to ADLS
- stage: UploadRepo
  displayName: 'Package and Upload Repo to ADLS'
  dependsOn: Test
  jobs:
  - job: PackageAndUpload
    displayName: 'Package Repo and Upload'
    steps:
    # Step 1: Zip the entire repository
    - script: |
        echo "Creating repo artifact..."
        zip -r repo_artifact.zip $(Build.SourcesDirectory)
      displayName: 'Zip the entire repository'

    # Step 2: Optional - publish as DevOps artifact
    # - task: PublishPipelineArtifact@1
    #   inputs:
    #     targetPath: '$(Build.SourcesDirectory)/repo_artifact.zip'
    #     artifact: 'RepoArtifact'

    # Step 3: Upload the artifact to ADLS
    - task: AzureCLI@2
      displayName: 'Upload Repo Artifact to ADLS'
      inputs:
        azureSubscription: 'adls'  # Replace with your Service Connection name
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          STORAGE_ACCOUNT="mystorageaccount"
          CONTAINER_NAME="mycontainer"
          ARTIFACT_FILE="$(Build.SourcesDirectory)/repo_artifact.zip"
          DEST_PATH="pipeline-artifacts/repo_artifact.zip"
        
          echo "Checking artifact file exists..."
          if [ -f "$ARTIFACT_FILE" ]; then
            echo "File found: $ARTIFACT_FILE"
          else
            echo "File NOT found! Pipeline workspace contents:"
            ls -l $(Build.SourcesDirectory)
            exit 1
          fi
        
          echo "Uploading $ARTIFACT_FILE to ADLS..."
          az storage fs file upload \
              --account-name $STORAGE_ACCOUNT \
              --file-system $CONTAINER_NAME \
              --path $DEST_PATH \
              --source $ARTIFACT_FILE \
              --auth-mode login \
              --overwrite

